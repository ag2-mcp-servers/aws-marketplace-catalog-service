# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:35:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ARN(
    RootModel[constr(pattern=r'^[a-zA-Z0-9:*/-]+$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^[a-zA-Z0-9:*/-]+$', min_length=1, max_length=2048)


class AccessDeniedException(RootModel[Any]):
    root: Any


class CancelChangeSetRequest(BaseModel):
    pass


class Catalog(RootModel[constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=64)]):
    root: constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=64)


class ChangeName(RootModel[constr(pattern=r'^[a-zA-Z]$', min_length=1, max_length=72)]):
    root: constr(pattern=r'^[a-zA-Z]$', min_length=1, max_length=72)


class ChangeSetName(
    RootModel[constr(pattern=r'^[\w\s+=.:@-]+$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^[\w\s+=.:@-]+$', min_length=1, max_length=100)


class ChangeStatus(Enum):
    PREPARING = 'PREPARING'
    APPLYING = 'APPLYING'
    SUCCEEDED = 'SUCCEEDED'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'


class ChangeType(
    RootModel[constr(pattern=r'^[A-Z][\w]*$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[A-Z][\w]*$', min_length=1, max_length=255)


class ClientRequestToken(
    RootModel[constr(pattern=r'^[!-~]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[!-~]+$', min_length=1, max_length=64)


class DateTimeISO8601(
    RootModel[
        constr(
            pattern=r'^([\d]{4})\-(1[0-2]|0[1-9])\-(3[01]|0[1-9]|[12][\d])T(2[0-3]|[01][\d]):([0-5][\d]):([0-5][\d])Z$',
            min_length=20,
            max_length=20,
        )
    ]
):
    root: constr(
        pattern=r'^([\d]{4})\-(1[0-2]|0[1-9])\-(3[01]|0[1-9]|[12][\d])T(2[0-3]|[01][\d]):([0-5][\d]):([0-5][\d])Z$',
        min_length=20,
        max_length=20,
    )


class DeleteResourcePolicyRequest(BaseModel):
    pass


class DeleteResourcePolicyResponse(BaseModel):
    pass


class DescribeChangeSetRequest(BaseModel):
    pass


class DescribeEntityRequest(BaseModel):
    pass


class EntityNameString(
    RootModel[constr(pattern=r'^\\S+[\\S\\s]*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^\\S+[\\S\\s]*', min_length=1, max_length=255)


class EntityType(
    RootModel[constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=255)


class ErrorCodeString(
    RootModel[constr(pattern=r'^[a-zA-Z_]+$', min_length=1, max_length=72)]
):
    root: constr(pattern=r'^[a-zA-Z_]+$', min_length=1, max_length=72)


class ExceptionMessageContent(
    RootModel[constr(pattern=r'^(.)+$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^(.)+$', min_length=1, max_length=2048)


class FailureCode(Enum):
    CLIENT_ERROR = 'CLIENT_ERROR'
    SERVER_FAULT = 'SERVER_FAULT'


class FilterName(
    RootModel[constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=255)


class FilterValueContent(
    RootModel[constr(pattern=r'^(.)+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^(.)+$', min_length=1, max_length=255)


class GetResourcePolicyRequest(BaseModel):
    pass


class Identifier(
    RootModel[constr(pattern=r'^[\w\-@]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[\w\-@]+$', min_length=1, max_length=255)


class InternalServiceException(RootModel[Any]):
    root: Any


class Json(
    RootModel[
        constr(pattern=r'^[\s]*\{[\s\S]*\}[\s]*$', min_length=2, max_length=16384)
    ]
):
    root: constr(pattern=r'^[\s]*\{[\s\S]*\}[\s]*$', min_length=2, max_length=16384)


class ListChangeSetsMaxResultInteger(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20)


class ListEntitiesMaxResultInteger(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class NextToken(
    RootModel[constr(pattern=r'^[\w+=.:@\-\/]$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^[\w+=.:@\-\/]$', min_length=1, max_length=2048)


class OwnershipType(Enum):
    SELF = 'SELF'
    SHARED = 'SHARED'


class PutResourcePolicyResponse(BaseModel):
    pass


class ResourceARN(
    RootModel[
        constr(
            pattern=r'^arn:[\w+=/,.@-]+:aws-marketplace:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^arn:[\w+=/,.@-]+:aws-marketplace:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*$',
        min_length=1,
        max_length=255,
    )


class ResourceId(RootModel[constr(pattern=r'^[\w\-]+$', min_length=1, max_length=255)]):
    root: constr(pattern=r'^[\w\-]+$', min_length=1, max_length=255)


class ResourceIdList(RootModel[List[ResourceId]]):
    root: List[ResourceId]


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceNotSupportedException(RootModel[Any]):
    root: Any


class ResourcePolicyJson(
    RootModel[
        constr(
            pattern=r'^[\u0009\u000A\u000D\u0020-\u00FF]+$',
            min_length=1,
            max_length=10240,
        )
    ]
):
    root: constr(
        pattern=r'^[\u0009\u000A\u000D\u0020-\u00FF]+$', min_length=1, max_length=10240
    )


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SortBy(RootModel[constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=255)]):
    root: constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=255)


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class StartChangeSetResponse(BaseModel):
    ChangeSetArn: Optional[ARN] = None
    ChangeSetId: Optional[ResourceId] = None


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class ThrottlingException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceArn: ResourceARN
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class ValidationException(RootModel[Any]):
    root: Any


class ValueList(RootModel[List[FilterValueContent]]):
    root: List[FilterValueContent] = Field(..., max_length=10, min_length=1)


class VisibilityValue(
    RootModel[constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=64)


class Sort(BaseModel):
    SortBy_1: Optional[SortBy] = Field(None, alias='SortBy')
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListTagsForResourcePostRequest(BaseModel):
    ResourceArn: constr(
        pattern=r'^arn:[\w+=/,.@-]+:aws-marketplace:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*$',
        min_length=1,
        max_length=255,
    ) = Field(
        ...,
        description='Required. The Amazon Resource Name (ARN) associated with the resource you want to list tags on.',
    )


class PutResourcePolicyPostRequest(BaseModel):
    Policy: constr(
        pattern=r'^[\u0009\u000A\u000D\u0020-\u00FF]+$', min_length=1, max_length=10240
    ) = Field(..., description='The policy document to set; formatted in JSON.')
    ResourceArn: constr(
        pattern=r'^arn:[\w+=/,.@-]+:aws-marketplace:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*$',
        min_length=1,
        max_length=255,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Entity resource you want to associate with a resource policy. ',
    )


class UntagResourcePostRequest(BaseModel):
    ResourceArn: constr(
        pattern=r'^arn:[\w+=/,.@-]+:aws-marketplace:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*$',
        min_length=1,
        max_length=255,
    ) = Field(
        ...,
        description='Required. The Amazon Resource Name (ARN) associated with the resource you want to remove the tag from.',
    )
    TagKeys: List[TagKey] = Field(
        ...,
        description='Required. A list of key names of tags to be removed. Number of strings allowed: 0-256.',
        max_length=200,
        min_length=1,
    )


class CancelChangeSetResponse(BaseModel):
    ChangeSetArn: Optional[ARN] = None
    ChangeSetId: Optional[ResourceId] = None


class ChangeSetSummaryListItem(BaseModel):
    ChangeSetArn: Optional[ARN] = None
    ChangeSetId: Optional[ResourceId] = None
    ChangeSetName_1: Optional[ChangeSetName] = Field(None, alias='ChangeSetName')
    EndTime: Optional[DateTimeISO8601] = None
    EntityIdList: Optional[ResourceIdList] = None
    FailureCode_1: Optional[FailureCode] = Field(None, alias='FailureCode')
    StartTime: Optional[DateTimeISO8601] = None
    Status: Optional[ChangeStatus] = None


class DescribeEntityResponse(BaseModel):
    Details: Optional[Json] = None
    EntityArn: Optional[ARN] = None
    EntityIdentifier: Optional[Identifier] = None
    EntityType_1: Optional[EntityType] = Field(None, alias='EntityType')
    LastModifiedDate: Optional[DateTimeISO8601] = None


class Entity(BaseModel):
    Identifier_1: Optional[Identifier] = Field(None, alias='Identifier')
    Type: EntityType


class EntitySummary(BaseModel):
    EntityArn: Optional[ARN] = None
    EntityId: Optional[ResourceId] = None
    EntityType_1: Optional[EntityType] = Field(None, alias='EntityType')
    LastModifiedDate: Optional[DateTimeISO8601] = None
    Name: Optional[EntityNameString] = None
    Visibility: Optional[VisibilityValue] = None


class EntitySummaryList(RootModel[List[EntitySummary]]):
    root: List[EntitySummary]


class ErrorDetail(BaseModel):
    ErrorCode: Optional[ErrorCodeString] = None
    ErrorMessage: Optional[ExceptionMessageContent] = None


class ErrorDetailList(RootModel[List[ErrorDetail]]):
    root: List[ErrorDetail]


class Filter(BaseModel):
    Name: Optional[FilterName] = None
    ValueList_1: Optional[ValueList] = Field(None, alias='ValueList')


class FilterList(RootModel[List[Filter]]):
    root: List[Filter] = Field(..., max_length=8, min_length=1)


class GetResourcePolicyResponse(BaseModel):
    Policy: Optional[ResourcePolicyJson] = None


class ListEntitiesResponse(BaseModel):
    EntitySummaryList_1: Optional[EntitySummaryList] = Field(
        None, alias='EntitySummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: ResourceARN


class PutResourcePolicyRequest(BaseModel):
    Policy: ResourcePolicyJson
    ResourceArn: ResourceARN


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=1)


class TagResourceRequest(BaseModel):
    ResourceArn: ResourceARN
    Tags: TagList


class ListChangeSetsPostRequest(BaseModel):
    Catalog: constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=64) = Field(
        ...,
        description='The catalog related to the request. Fixed value: <code>AWSMarketplace</code> ',
    )
    FilterList: Optional[List[Filter]] = Field(
        None, description='An array of filter objects.', max_length=8, min_length=1
    )
    MaxResults: Optional[conint(ge=1, le=20)] = Field(
        None,
        description='The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.',
    )
    NextToken: Optional[
        constr(pattern=r'^[\w+=.:@\-\/]$', min_length=1, max_length=2048)
    ] = Field(
        None,
        description='The token value retrieved from a previous call to access the next page of results.',
    )
    Sort_1: Optional[Sort] = Field(
        None,
        alias='Sort',
        description='An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.',
    )


class ListEntitiesPostRequest(BaseModel):
    Catalog: constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=64) = Field(
        ...,
        description='The catalog related to the request. Fixed value: <code>AWSMarketplace</code> ',
    )
    EntityType: constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=255) = Field(
        ..., description='The type of entities to retrieve.'
    )
    FilterList: Optional[List[Filter]] = Field(
        None,
        description='An array of filter objects. Each filter object contains two attributes, <code>filterName</code> and <code>filterValues</code>.',
        max_length=8,
        min_length=1,
    )
    MaxResults: Optional[conint(ge=1, le=50)] = Field(
        None,
        description="Specifies the upper limit of the elements on a single page. If a value isn't provided, the default value is 20.",
    )
    NextToken: Optional[
        constr(pattern=r'^[\w+=.:@\-\/]$', min_length=1, max_length=2048)
    ] = Field(
        None,
        description='The value of the next token, if it exists. Null if there are no more results.',
    )
    OwnershipType_1: Optional[OwnershipType] = Field(
        None, alias='OwnershipType', description=''
    )
    Sort_1: Optional[Sort] = Field(
        None,
        alias='Sort',
        description='An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.',
    )


class TagResourcePostRequest(BaseModel):
    ResourceArn: constr(
        pattern=r'^arn:[\w+=/,.@-]+:aws-marketplace:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*$',
        min_length=1,
        max_length=255,
    ) = Field(
        ...,
        description='Required. The Amazon Resource Name (ARN) associated with the resource you want to tag.',
    )
    Tags: List[Tag] = Field(
        ...,
        description='Required. A list of objects specifying each key name and value. Number of objects allowed: 1-50.',
        max_length=200,
        min_length=1,
    )


class Change(BaseModel):
    ChangeName_1: Optional[ChangeName] = Field(None, alias='ChangeName')
    ChangeType_1: ChangeType = Field(..., alias='ChangeType')
    Details: Json
    Entity_1: Entity = Field(..., alias='Entity')
    EntityTags: Optional[TagList] = None


class ChangeSetSummaryList(RootModel[List[ChangeSetSummaryListItem]]):
    root: List[ChangeSetSummaryListItem]


class ChangeSummary(BaseModel):
    ChangeName_1: Optional[ChangeName] = Field(None, alias='ChangeName')
    ChangeType_1: Optional[ChangeType] = Field(None, alias='ChangeType')
    Details: Optional[Json] = None
    Entity_1: Optional[Entity] = Field(None, alias='Entity')
    ErrorDetailList_1: Optional[ErrorDetailList] = Field(None, alias='ErrorDetailList')


class ListChangeSetsRequest(BaseModel):
    Catalog_1: Catalog = Field(..., alias='Catalog')
    FilterList_1: Optional[FilterList] = Field(None, alias='FilterList')
    MaxResults: Optional[ListChangeSetsMaxResultInteger] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Sort_1: Optional[Sort] = Field(None, alias='Sort')


class ListChangeSetsResponse(BaseModel):
    ChangeSetSummaryList_1: Optional[ChangeSetSummaryList] = Field(
        None, alias='ChangeSetSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEntitiesRequest(BaseModel):
    Catalog_1: Catalog = Field(..., alias='Catalog')
    EntityType_1: EntityType = Field(..., alias='EntityType')
    FilterList_1: Optional[FilterList] = Field(None, alias='FilterList')
    MaxResults: Optional[ListEntitiesMaxResultInteger] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OwnershipType_1: Optional[OwnershipType] = Field(None, alias='OwnershipType')
    Sort_1: Optional[Sort] = Field(None, alias='Sort')


class ListTagsForResourceResponse(BaseModel):
    ResourceArn: Optional[ResourceARN] = None
    Tags: Optional[TagList] = None


class RequestedChangeList(RootModel[List[Change]]):
    root: List[Change] = Field(..., max_length=20, min_length=1)


class StartChangeSetRequest(BaseModel):
    Catalog_1: Catalog = Field(..., alias='Catalog')
    ChangeSet: RequestedChangeList
    ChangeSetName_1: Optional[ChangeSetName] = Field(None, alias='ChangeSetName')
    ChangeSetTags: Optional[TagList] = None
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )


class StartChangeSetPostRequest(BaseModel):
    Catalog: constr(pattern=r'^[a-zA-Z]+$', min_length=1, max_length=64) = Field(
        ...,
        description='The catalog related to the request. Fixed value: <code>AWSMarketplace</code> ',
    )
    ChangeSet: List[Change] = Field(
        ...,
        description='Array of <code>change</code> object.',
        max_length=20,
        min_length=1,
    )
    ChangeSetName: Optional[
        constr(pattern=r'^[\w\s+=.:@-]+$', min_length=1, max_length=100)
    ] = Field(
        None,
        description='Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. ',
    )
    ChangeSetTags: Optional[List[Tag]] = Field(
        None,
        description='A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.',
        max_length=200,
        min_length=1,
    )
    ClientRequestToken: Optional[
        constr(pattern=r'^[!-~]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='A unique token to identify the request to ensure idempotency.',
    )


class ChangeSetDescription(RootModel[List[ChangeSummary]]):
    root: List[ChangeSummary]


class DescribeChangeSetResponse(BaseModel):
    ChangeSet: Optional[ChangeSetDescription] = None
    ChangeSetArn: Optional[ARN] = None
    ChangeSetId: Optional[ResourceId] = None
    ChangeSetName_1: Optional[ChangeSetName] = Field(None, alias='ChangeSetName')
    EndTime: Optional[DateTimeISO8601] = None
    FailureCode_1: Optional[FailureCode] = Field(None, alias='FailureCode')
    FailureDescription: Optional[ExceptionMessageContent] = None
    StartTime: Optional[DateTimeISO8601] = None
    Status: Optional[ChangeStatus] = None
